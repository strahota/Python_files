#################################
## Intro to Strings
#################################
 
## strings (str objects) are enclosed by single or double quotes (' or "). Just be consistent within your code!
message1 = 'I love Python Programming!'
message2 = "I love Python Programming!"
 
## print() function displays the content of the string variable at console
print(message1)
 
#hello1 = 'Hi there! I\'m Andrei'   # => error, cannot use ' inside ' ' or " inside " "
hello1 = 'Hi there! I\'m Andrei'    # => correct. ' inside ' ' must be escaped  using \
hello2 = "Hi there! I'm Andrei"     # you can use ' inside " " or " inside ' '
 
 
## Instructions between """ or ''' are treated as comments. It's recommended to use # to comment individual lines
"""
This is a multiline comment
a = 5
print(a)
Comment ends here.
"""
 
# \n is a new line
print('Hello \nWorld!')     # => it displays Hello World! on 2 lines
 
 
 
#################################
## User Input and Type Casting
#################################
 
## Simple way to get user input from console
input_string_var = input("Enter some data: ") # Returns the data as a string
 
# To perform arithmetic operations we must cast to int or float
a = input('Enter a:')       # => a stores string
b = int(input('Enter b:'))  # => b stores an int
c = float(a) * b            # => here I multiply a float by an int
 
 
## Type casting
a = 3       # => type int
b = 4.5     # => type float
c = '1.2'   # => type str
 
print('a is ' + str(a))     # => str(a) returns a string from an int
print('b is ' + str(b))     # => str(b) returns a string from a float
d = b * float(c)            # => here I multipy 2 floats. d is a float.
 
str1 = '12 a'
#float(str1)    # => error
 
 
 
####################################
## String Indexing, Operations and Slicing
####################################
 
## A string can be treated like a list of characters. Indexing starts from 0
language = 'Python 3'
language[0]              # => 'P'
language[1]              # => 'y'
language[-1]             # => '3'
language[-2]             # => ' '
"This is a string"[0]    # => 'T'
 
#language[100]          # => IndexError: string index out of range
 
# Cannot modify a string, it's immutable
#language[0] = 'J'      # => TypeError: 'str' object does not support item assignment
 
 
# You can find the length of a string
len("This is a string")  # => 16
 
 
## Strings can be concatenated with + and repeated with *
print('Hello ' + 'world!')   # => 'Hello world!'
print('Hello ' * 3)          # => 'Hello Hello Hello '
print('PI:' + str(3.1415))   # => Can concatenate only strings
 
 
## Slicing returns a new string
## start index is included, end index is excluded
movie = 'Star Wars'
movie[0:4]    # => 'Star' -> from index 0 included to index 4 excluded
movie[:4]     # => 'Star' -> start index defaults to zero
movie[2:]     # => 'ar Wars' -> end index defaults to the index of the last char of the string
movie[::]     # => 'Star Wars'
movie[2:100]   # => 'ar Wars -> slicing doesn't return error when using index out of range
movie[1:6:2]   # => 'trW' -> the 3rd index is the step (from index 2 included to 6 excluded in steps of 2)
movie[6:1:-1]  # => 'aW ra' -> from index 6 included to index 1 excluded in steps of -1 (backwards)
movie[::-1]    # => 'sraW ratS -> reverses the string
 
 
 
#################################
## Formatting Strings
#################################
price = 1.33
quantity = 5
 
# f-string literals (Python 3.6+) - NEW!
f'The price is {price}'                    # => 'The price is 1.33'
f'Total value is {price * quantity}'       # => 'Total value is 6.65'
f'Total value is {price * quantity:.4f}'   # => 'Total value is 6.6500' -> displaying with 4 decimals
 
# Classical method
'The price is {}'.format(price)                      # => 'The price is 1.33'
'The total value is {}'.format(price * quantity)     # => 'The total value is 6.65'
'The total value is {:.4f}'.format(price * quantity) # => 'The total value is 6.6500' -> displaying with 4 decimals
 
 
'The price is {} and the total value is {}'.format(price, price * quantity)    # => 'The price is 1.33 and the total value is 6.65'
'The price is {0} and the total value is {1}'.format(price, price * quantity)  # => 'The price is 1.33 and the total value is 6.65'
'The total value is {1} and the price is {0}'.format(price, price * quantity)  # => 'The total value is 6.65 and the price is 1.33'
 
print('The total value is ', price * quantity)     # => 'The total value is 6.65'
 
 
 
########################
## String Methods
########################
 
dir(str)        # => lists all string methods
help(str.find)  # => displays the help of a method
 
## All string methods return a new string but don't modify the original string
my_str = 'I learn Python Programming'
my_str.upper()        # => 'I LEARN PYTHON PROGRAMMING'
my_str.lower()        # => 'i learn python programming'
 
my_ip = '  10.0.0.1 '
my_ip.strip()       # => '10.0.0.1'
 
my_ip = '$$$10.0.0.1$$'
my_ip.strip('$')        # => '10.0.0.1'
 
# Removes all leading whitespace in string
my_ip.lstrip()      # => '10.0.0.1 '
 
# Removes all trailing whitespace of string
my_ip.rstrip()      # => '  10.0.0.1'
 
my_str = 'I learn Python'
my_str.replace('Python', 'Go')     # => 'I learn Go'
 
## split() returns a list from a string having a delimiter
my_ip.split('.')            # => ['10', '0', '0', '1']
 
## Be default the delimiter is a whitespace
my_list = my_str.split()      # => my_list = ['I', 'learn', 'Python', 'Programming']
 
## join() returns a string from a list
':'.join(my_list)       # => '10:0:0:1'
 
## in and not in operators test membership
'10' in my_ip           # => returns True
'10' not in my_ip       # => returns False
'20' in my_ip           # => returns False
 
 
# Other string methods
my_str = 'this is a string. this is a string'
 
## Returns the first index in my_str where substring 'is' is found or -1 if it didn't find the substring
my_str.find('is')       # => 2
my_str.find('si')       # => -1
 
# Returns a capitalized version of the string.
my_str.capitalize()     # => 'This is a string. this is a string'
 
## Returns True if my_str is an uppercase string, False otherwise
my_str.isupper()        # => False
 
## Returns True if my_str is a lowercase string, False otherwise
my_str.lower().islower()    # => True
 
# Returns the number of occurrences of substring 's' in my_str
my_str.count('s')       # => 6
 
'0123123'.isdigit()     # => True
'0123123x'.isdigit()    # => False
'abc'.isalpha()         # => True
'0123123x'.isalnum()    # => True
 
my_str1 = 'Hi everyone!'
# Inverts case for all letters in string
my_str1.swapcase()      # => 'hI EVERYONE!'
Fullscreen
Expanded view
Go to Previous lecture186. String Methods
Go to Next lecture
